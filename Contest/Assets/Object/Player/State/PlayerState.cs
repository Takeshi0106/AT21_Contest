using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.Playables;
using UnityEngine.SceneManagement;


// =====================================
// プレイヤーの状態を管理する
// =====================================

// Rigidbodyコンポーネントが必須
[RequireComponent(typeof(Rigidbody))]

// エディタ実行時に実行される
[RequireComponent(typeof(Renderer))]

#if UNITY_EDITOR

#endif

public class PlayerState : BaseCharacterState<PlayerState>
{
    // インスペクタービューから変更できる
    [Header("カメラオブジェクト名")]
    [SerializeField] private string cameraName = "Main Camera"; //カメラオブジェクト名
    [Header("プレイヤーの歩く移動速度")]
    [SerializeField] private float walkSpeed = 2.0f; //移動速度
    [Header("プレイヤーの歩く移動速度")]
    [SerializeField] private float dashSpeed = 4.0f; //移動速度
    [Header("プレイヤーのカウンター攻撃範囲オブジェクト")]
    [SerializeField] private GameObject playerCounterObject;
    [Header("カウンター可能な攻撃のタグ")]
    [SerializeField] private string counterPossibleAttack = "EnemyAttack";
    [Header("カウンター成功時の攻撃の大きさ")]
    [SerializeField] private float counterRange = 5.0f;
    [Header("敵の攻撃タグ名")]
    [SerializeField] private string enemyAttackTag = "EnemyAttack";
    [Header("プレイヤーのカウンター成功後の無敵時間（カウンター成功中の無敵時間とは別）")]
    [SerializeField] private int invincibleTime = 0;
    [Header("プレイヤーがひるんだ時のフレーム数")]
    [SerializeField] private int FlinchFreams = 0;
    [Header("プレイヤーが投げるのを失敗したときのフレーム数")]
    [SerializeField] private int ThrowFailedFreams = 0;
    [Header("プレイヤーが投げるのを失敗したときのアニメーション")]
    [SerializeField] private AnimationClip throwFailedAnimations = null;


    // カメラのトランスフォーム このスクリプト以外で変更できないように設定
    [HideInInspector] private Transform cameraTransform;
    // Playerのリジッドボディ
    [HideInInspector] private Rigidbody playerRigidbody;
    // Playerのコライダー
    [HideInInspector] private Collider playerCollider;
    // Playerのトランスフォーム
    [HideInInspector] private Transform playerTransform;
    // Playerのカウンターマネージャー
    [HideInInspector] private CounterManager playerCounterManager;
    // Playerのウェポンマネージャー
    [HideInInspector] private WeponManager playerWeponManager;
    // Playerのアニメーター
    [HideInInspector] private Animator playerAnimator;
    // カウンターのAttackController
    [HideInInspector] private AttackController playerCounterAttackController;
    // Playerの状態マネージャー
    [HideInInspector] private StatusEffectManager playerStatusEffectManager;
    // PlayerのHPマネージャー
    private HPManager hpManager;


    // 現在のコンボ数
    private int playerConbo = 0;
    // 現在使っている武器のナンバー
    private int weponNumber = 0;

    // 入力をスタックする
    RESEVEDSTATE nextReserved = RESEVEDSTATE.NOTHING;

#if UNITY_EDITOR
    // エディタ実行時に実行される
    // Playerのレンダラー
    [HideInInspector] public Renderer playerRenderer;
#endif

    // Start is called before the first frame update
    void Start()
    {
        //　カメラオブジェクトを代入
        cameraTransform = GameObject.Find(cameraName).transform;
        // Playerリジッドボディー
        playerRigidbody = this.gameObject.GetComponent<Rigidbody>();
        // Playerコライダー
        playerCollider = this.gameObject.GetComponent<Collider>();
        // Playerトランスフォーム
        playerTransform = this.gameObject.GetComponent<Transform>();
        // カウンターマネージャー
        playerCounterManager = this.gameObject.GetComponent<CounterManager>();
        // ウェポンマネージャー
        playerWeponManager = this.gameObject.GetComponent<WeponManager>();
        // アニメーター
        playerAnimator = this.gameObject.GetComponent<Animator>();
        // カウンターの攻撃コントローラー
        playerCounterAttackController = playerCounterObject.GetComponent<AttackController>();
        // HpManager
        hpManager = this.gameObject.GetComponent<HPManager>(); 
        // 状態管理
        playerStatusEffectManager = this.gameObject.GetComponent<StatusEffectManager>();

        // playerCounterObject.SetActive(false);
        // HPマネージャーにDie関数を渡す
        hpManager.onDeath.AddListener(Die);


        // 状態をセット
        currentState = PlayerStandingState.Instance;
        // 状態の開始処理
        currentState.Enter(this);

#if UNITY_EDITOR

        // エディタ実行時に取得して色を変更する
        playerRenderer = this.gameObject.GetComponent<Renderer>();

        // 所得出来ていないときログを出す（エラーではなく情報）
        if (cameraTransform == null)
        {
            Debug.Log("PlayerState : カメラオブジェクトが見つかりません");
        }
        if (playerRigidbody == null)
        {
            Debug.Log("PlayerState : Rigidbodyが見つかりません");
        }
        if (playerCollider == null)
        {
            Debug.Log("PlayerState : Colliderが見つかりません");
        }
        if (playerTransform == null)
        {
            Debug.Log("PlayerState : Transformが見つかりません");
        }
        if (playerCounterManager == null)
        {
            Debug.Log("PlayerState : CounterManagerが見つかりません");
        }
        if (playerRigidbody == null)
        {
            Debug.Log("PlayerState : Rendererが見つかりません");
        }
        if (playerWeponManager == null)
        {
            Debug.Log("PlayerState : WeponManagerが見つかりません");
        }
        if (playerAnimator == null)
        {
            Debug.Log("PlayerState : PlayerAnimatorが見つかりません");
        }
        if (playerCounterAttackController == null)
        {
            Debug.Log("PlayerState : PlayerCounterAttackControllerが見つかりません");
        }
        if (hpManager == null)
        {
            Debug.Log("PlayerState : HPManagerが見つかりません");
        }
        if (playerStatusEffectManager == null)
        {
            Debug.Log("PlayerState : playerStatusEffectManagerが見つかりません");
        }

#endif
    }



    void Update()
    {
        // 状態を更新する
        StateUpdate();
        // カウンターランクが落ちる処理
        playerCounterManager.GaugeDecay();
    }



    // ダメージ処理
    public void HandleDamage(string getAttackTags)
    {
        // 保存したコライダーのタグが元に戻る可のチェック
        CleanupInvalidDamageColliders(getAttackTags);

        // プレイヤーが無敵状態か調べる
        if (playerStatusEffectManager.Invincible(invincibleTime))
        {
#if UNITY_EDITOR
            playerRenderer.material.color = Color.yellow;
#endif
            // 無敵状態なら関数を終了する
            return;
        }
#if UNITY_EDITOR
        else
        {
            // 無敵終了後は色を元に戻す
            if (playerRenderer.material.color == Color.yellow)
            {
                playerRenderer.material.color = Color.white;
            }
        }
#endif


        // 当たっているオブジェクトのタグを調べる
        foreach (var info in collidedInfos)
        {
            // すでにダメージ処理済み,タグコンポーネントがnullならスキップ
            if (info.multiTag == null || damagedColliders.Contains(info.collider)) { continue; }

            // 敵の攻撃タグがあるかの判定
            if (info.multiTag.HasTag(getAttackTags))
            {
#if UNITY_EDITOR
                Debug.Log("ダメージ対象ヒット: " + info.collider.gameObject.name);
#endif

                // コライダーは記録
                damagedColliders.Add(info.collider);

                // 親オブジェクトから EnemyState を取得
                var enemyState = info.collider.GetComponentInParent<EnemyState>();

                if (enemyState != null)
                {
                    // ダメージ処理
                    hpManager.TakeDamage(enemyState.GetEnemyWeponManager().GetWeaponData(0).GetDamage(enemyState.GetEnemyConbo()));
                }

#if UNITY_EDITOR
                // ダメージ処理などをここに追加
                Debug.Log("HP " + hpManager.GetCurrentHP());
#endif
            }
        }
    }



    // 攻撃タグが元に戻るまで
    public void CleanupInvalidDamageColliders(string getAttackTags)
    {
        // タグが攻撃タグ以外の物かを調べる
        damagedColliders.RemoveWhere(collider =>
        {
            var tag = collidedInfos.FirstOrDefault(info => info.collider == collider).multiTag;
            return tag == null || !tag.HasTag(getAttackTags);
        });

        // コライダーが非アクティブ化を調べる
        damagedColliders.RemoveWhere(collider =>
        collider == null || !collider.gameObject.activeInHierarchy || !collider.enabled);

        // 当たっているオブジェクトが非アクティブかを調べる
        collidedInfos.RemoveAll(info =>
        info.collider == null ||
        !info.collider.gameObject.activeInHierarchy ||
        !info.collider.enabled);
    }



    private void Die()
    {
        Cursor.visible = true;
        Cursor.lockState = CursorLockMode.None;

        gameObject.SetActive(false);
        SceneManager.LoadScene("ResultScene");
    }



    public void AddDamagedCollider(Collider target)
    {
        if (target != null && !damagedColliders.Contains(target))
        {
            damagedColliders.Add(target);
        }
    }



    // セッター
    public void SetPlayerCombo(int value) { playerConbo = value; }
    public void SetPlayerNextReseved(RESEVEDSTATE next) { nextReserved = next; }



    // ゲッター
    public float GetWalkSpeed()                      { return walkSpeed; }
    public float GetDashSpeed()                      { return dashSpeed; }
    public List<CollidedInfo> GetPlayerCollidedInfos() { return collidedInfos; }
    public Transform GetCameraTransform()            { return cameraTransform; }
    public Rigidbody GetPlayerRigidbody()            { return playerRigidbody; }
    public Collider GetPlayerCollider()              { return playerCollider; }
    public Transform GetPlayerTransform()            { return playerTransform; }
    public CounterManager GetPlayerCounterManager()  { return playerCounterManager; }
    public WeponManager GetPlayerWeponManager()      { return playerWeponManager; }
    public int GetPlayerConbo()                      { return playerConbo; }
    public int GetPlayerWeponNumber()                { return weponNumber; }
    public Animator GetPlayerAnimator() { return playerAnimator; }
    public GameObject GetPlayerCounterObject() { return playerCounterObject; }
    public string GetPlayerCounterPossibleAttack() { return counterPossibleAttack; }
    public RESEVEDSTATE GetPlayerNextReseved() { return nextReserved; }
    public AttackController GetPlayerCounterAttackController() { return playerCounterAttackController; }
    public float GetPlayerCounterRange() { return counterRange; }
    public HPManager GetPlayerHPManager() { return hpManager; }
    public string GetPlayerEnemyAttackTag() { return enemyAttackTag; }
    public StatusEffectManager GetPlayerStatusEffectManager() {  return playerStatusEffectManager; }
    public HashSet<Collider> GetPlayerDamagedColliders() { return damagedColliders; }
    public int GetPlayerFlinchFreams() { return FlinchFreams; }
    public int GetThrowFailedFreams() { return ThrowFailedFreams; }
    public AnimationClip GetThrowFailedAnimation() { return throwFailedAnimations; }

#if UNITY_EDITOR
    // エディタ実行時に実行される
    public Renderer GetPlayerRenderer() { return playerRenderer; }
#endif
}

